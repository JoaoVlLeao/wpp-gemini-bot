// index.js
import 'dotenv/config';
import fs from "fs";
import path from "path";
import pkg from 'whatsapp-web.js';
const { Client, LocalAuth } = pkg;
import qrcode from 'qrcode-terminal';
import pino from 'pino';
import { getOrderByNumber, summarizeOrder } from './shopify.js';
import { GoogleGenerativeAI } from '@google/generative-ai';
import express from "express"; // <-- adicione esta importa√ß√£o aqui

// ====== KEEP ALIVE SERVER ======
const app = express();
const PORT = process.env.PORT || 8080;

app.get("/", (req, res) => res.send("üíì KeepAlive: bot rodando normalmente"));
app.listen(PORT, () => console.log(`üåê Servidor ativo na porta ${PORT}`));

const log = pino({ level: 'info' });

// ======= Gemini setup =======
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const MODEL_NAME = process.env.GEMINI_MODEL || 'gemini-2.5-pro';

// ======= Sess√µes =======
const sessions = new Map();
const MAX_TURNS = 12;

function getSession(chatId) {
  if (!sessions.has(chatId))
sessions.set(chatId, {
  history: [],
  name: null,
  greeted: false,
  batch: [],
  timer: null,
  buffer: [],
  bufferTimer: null
});

  return sessions.get(chatId);
}

function pushHistory(session, role, text) {
  session.history.push({ role, text });
  if (session.history.length > MAX_TURNS * 2)
    session.history = session.history.slice(-MAX_TURNS * 2);
}

// ======= Fun√ß√£o principal (Gemini) =======
async function chatWithGemini(session, userMessage, contextData = null, isFirstMessage = false) {
  try {
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    let contextText = `
Voc√™ √© *Fernanda*, atendente da loja *AquaFit Brasil*.
Seu tom √© natural, gentil e humano ‚Äî como uma conversa real no WhatsApp.
Use frases curtas, claras e educadas.  
Responda sempre em portugu√™s.  
Use o nome da cliente (${session.name || 'n√£o informado'}) apenas quando for natural.  
Jamais repita apresenta√ß√µes ap√≥s a primeira mensagem.
`;

    if (isFirstMessage && !session.greeted) {
      contextText += `
Na primeira mensagem, apresente-se de forma breve:  
"Oi, ${session.name || ''}? Aqui √© a Fernanda, da AquaFit Brasil. Como posso te ajudar hoje?"  
Essa apresenta√ß√£o ocorre apenas na primeira mensagem.
`;
    }

    contextText += `
‚öôÔ∏è INSTRU√á√ïES DE ATENDIMENTO:caso a cliente n√£o tenha fornecido no n√∫mero do pedido nas primeiras mensagens, pergunte primeiro qual o n√∫mero do pedido.
1. Existem dois tipos de atendimento: *Tira D√∫vidas* e *Problemas*.
   - Ao identificar um problema, use o tom mais emp√°tico poss√≠vel.
   - Baseie-se apenas nas informa√ß√µes fornecidas abaixo, sem inventar nada.
   - Se n√£o souber a resposta, diga que n√£o possui essa informa√ß√£o.
   - Se for fora da loja AquaFit, diga educadamente que s√≥ pode responder sobre a loja AquaFit Brasil.

2. Para *Tira D√∫vidas*:
   - Nunca mencione envio internacional.
   - Nunca fale em dias √∫teis.
   - Diga que o prazo m√©dio de entrega √© de 7 a 14 dias.
   - O c√≥digo de rastreamento √© enviado em at√© 24h ap√≥s a compra.
   - As entregas s√£o feitas pelos Correios.

3. Se a cliente disser que est√° informando o *n√∫mero do pedido* ou voc√™ pedir o n√∫mero,
   e ela enviar um n√∫mero com MAIS DE 5 D√çGITOS, 
   *n√£o tente consultar o sistema*.
   Em vez disso, diga de forma gentil e emp√°tica que provavelmente h√° um engano,
   e que o n√∫mero do pedido √© de 5 d√≠gitos, enviado por WhatsApp e e-mail logo ap√≥s a compra. Como por exemplo: #17545.


4. Casos espec√≠ficos:
   - *Taxado:* dizer que as taxas j√° foram pagas pela AquaFit.
   - *Importa√ß√£o n√£o autorizada:* informar que um novo produto foi reenviado no mesmo dia.
   - *Troca ou devolu√ß√£o:* pedir para enviar e-mail para suporte@aquafitbrasil.com. Em casos de atrasos, depois de enviar o rastreamento para a cliente, falar que √© por conta do atraso da log√≠stica dos correios e se desculpar. Al√©m disso, da primeira vez que a cliente falar sobre atraso, fale que verificou no nosso sistema o rastreamento e que ela deve receber em 7 dias. Nas pr√≥ximas vezes que a cliente falar sobre o atraso, n√£o necessariamente precisa ficar repetindo essa informa√ß√£o.
   - *Cancelamento:* tentar contornar, mas se insistir, orientar a enviar e-mail com assunto "Cancelamento - N√∫mero do pedido".

Pol√≠tica geral da loja:
Prazo m√©dio de entrega: 7 a 14 dias.
C√≥digo de rastreamento: enviado em at√© 24h.
Envio realizado pelos Correios.
Trocas e devolu√ß√µes: processadas em at√© 30 dias ap√≥s o recebimento.
Estorno: feito pela mesma forma de pagamento, nunca via Pix direto.
Quest√µes comuns: 1) Quanto tempo demora a entrega? ‚Äî Prazo m√©dio de 7 a 14 dias, frete gr√°tis, rastreamento em 24h. 2) Tamanho certo ‚Äî use a tabela e peso como refer√™ncia; acima de 90kg, indicar GG. Troca √© f√°cil se n√£o servir. 3) Conforto ‚Äî tecidos de alta elasticidade, bojo remov√≠vel, tiras ajust√°veis e resist√™ncia ao cloro, sal e sol. 4) E se n√£o gostar? ‚Äî pode trocar ou devolver em at√© 7 dias. 5) As fotos s√£o fi√©is? ‚Äî sim, feitas com luz natural, pequenas varia√ß√µes de tom s√£o normais. 6) Vale a pena pelo pre√ßo? ‚Äî sim, pe√ßas de qualidade premium e alta durabilidade.
`;

    if (contextData) {
      const rastreioLink = contextData.trackingNumber
        ? `https://aquafitbrasil.com/pages/rastreamento?codigo=${contextData.trackingNumber}`
        : null;
      contextText += `
üì¶ Pedido:
- N√∫mero: ${contextData.name || 'n√£o informado'}  
- Status: ${contextData.status || 'n√£o informado'}  
- Rastreamento: ${contextData.trackingNumber || 'n√£o dispon√≠vel'}  
${rastreioLink ? `- Link: ${rastreioLink}` : ''}

Diga algo como:
"O n√∫mero de rastreamento √© *${contextData.trackingNumber || ''}*.  
Voc√™ pode acompanh√°-lo no link abaixo:"  
E ent√£o envie o link completo.  
`;
    }

    const historyText = session.history
      .map(h => `${h.role === 'user' ? 'Cliente' : 'Fernanda'}: ${h.text}`)
      .join('\n');

    const prompt = `
${contextText}
Hist√≥rico:
${historyText}

Nova mensagem:
"${userMessage}"

Responda como *Fernanda*, de forma emp√°tica e natural, no m√°ximo duas mensagens curtas.Foque apenas na √∫ltima mensagem recebida.
Use o hist√≥rico apenas como contexto leve, n√£o repita informa√ß√µes antigas, a menos que seja necess√°rio.
Se a cliente mudar de assunto, responda ao novo tema e ignore mensagens anteriores que n√£o sejam mais relevantes.
Responda de forma natural, emp√°tica e breve (m√°ximo de duas mensagens curtas).
Evite repetir informa√ß√µes j√° confirmadas anteriormente, a menos que a cliente pe√ßa novamente.
N√£o mencione atrasos, prazos ou rastreios se a nova pergunta n√£o for sobre isso.
`;

    const result = await model.generateContent([prompt]);
    const text = result.response.text()?.trim();
    if (!text) return ['Desculpe, n√£o consegui entender direito.'];

    if (text.length > 300)
      return text.match(/.{1,300}(\s|$)/g).map(p => p.trim());

    return [text];
  } catch (err) {
    console.error('Erro no chatWithGemini:', err);
    return ['Desculpe, houve um problema. Pode tentar novamente em instantes?'];
  }
}

// ======= WhatsApp setup =======
import puppeteer from "puppeteer";

const client = new Client({
  authStrategy: new LocalAuth(), // mant√©m sess√£o salva no container
  puppeteer: {
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--single-process',
      '--disable-gpu',
      '--disable-features=site-per-process',
      '--use-gl=egl'
    ],
    executablePath: puppeteer.executablePath()

  }
});



client.on('qr', qr => {
  const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qr)}`;
  log.info(`üì± Escaneie o QR code nesse link: ${qrImageUrl}`);
});

client.on('ready', () => log.info('‚úÖ WhatsApp conectado e pronto.'));
client.on('auth_failure', m => log.error({ m }, 'Falha de autentica√ß√£o'));
client.on('disconnected', r => log.warn({ r }, 'Desconectado'));

// ======= HANDLER =======
client.on('message', async message => {
  try {
    const chat = await message.getChat();
    const contact = await message.getContact();
// üü° Se for √°udio ou imagem, processa com Gemini
if (message.type === 'audio' || message.type === 'ptt' || message.type === 'image') {
  const media = await message.downloadMedia();
  if (!media || !media.data) return;

  import fs from "fs";
  import path from "path";

  // Define extens√£o conforme o tipo
  const ext = message.type === 'image' ? 'jpg' : 'ogg';
  const filePath = path.resolve(`./temp_${message.id.id}.${ext}`);
  fs.writeFileSync(filePath, media.data, 'base64');

  console.log(`üü¢ M√≠dia recebida (${message.type}) de ${contact.pushname}`);

  // Seleciona o modelo multimodal do Gemini
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

  let prompt;
  let content;

  if (message.type === 'audio' || message.type === 'ptt') {
    // √Åudio ‚Üí transcri√ß√£o
    content = {
      inlineData: {
        mimeType: "audio/ogg",
        data: media.data
      }
    };
    prompt = "Transcreva este √°udio com clareza, pontua√ß√£o e naturalidade, retornando apenas o texto falado:";
  } else {
    // Imagem ‚Üí interpreta√ß√£o
    content = {
      inlineData: {
        mimeType: "image/jpeg",
        data: media.data
      }
    };
    prompt = `
Voc√™ √© Fernanda, atendente da AquaFit Brasil.
Descreva de forma breve e educada o que aparece nesta imagem.
Se for uma foto de produto, tente identificar se parece com um item da loja.
N√£o invente informa√ß√µes. Responda com uma frase natural.`;
  }

  const result = await model.generateContent([prompt, content]);
  const interpretation = result.response.text().trim();

  console.log(`üìù Interpreta√ß√£o da m√≠dia: ${interpretation}`);

  // substitui o conte√∫do da mensagem pelo texto interpretado
  message.body = interpretation;

  // e marca o tipo como texto, para o restante do c√≥digo seguir normalmente
  message.type = 'chat';
}


    const text = message.body?.trim();
    if (!text) return;
// ====== BUFFER DE MENSAGENS ======
const session = getSession(message.from);
if (!session.name && contact.pushname)
  session.name = contact.pushname.split(' ')[0];

// se ainda n√£o existe buffer para este chat, cria
if (!session.buffer) session.buffer = [];
session.buffer.push(text);

// se j√° houver um timer, cancela
if (session.bufferTimer) clearTimeout(session.bufferTimer);

// se for a primeira mensagem da conversa, espera 25 segundos; sen√£o, 10 segundos
const delay = !session.greeted ? 25000 : 10000;

session.bufferTimer = setTimeout(async () => {
  const combinedText = session.buffer.join('\n');
  session.buffer = [];
  session.bufferTimer = null;

  pushHistory(session, 'user', combinedText);
  session.lastActive = Date.now();

  // Delay natural antes de come√ßar a digitar (ap√≥s o primeiro contato)
  if (session.greeted) {
    await new Promise(r => setTimeout(r, 1500));
    chat.sendStateTyping();
    await new Promise(r => setTimeout(r, 1500));
  } else {
    chat.sendStateTyping();
  }

  let orderData = session.orderData || null; // tenta recuperar o pedido salvo da sess√£o
const matchOrder = combinedText.match(/\b(\d{3,8})\b/);
const matchEmail = combinedText.match(/[^\s]+@[^\s]+/);
const matchCPF = combinedText.match(/\d{3}\.?\d{3}\.?\d{3}-?\d{2}/);

if (matchOrder || matchEmail || matchCPF) {
  try {
    const key = matchOrder ? matchOrder[1] : matchEmail ? matchEmail[0] : matchCPF[0];
    const order = await getOrderByNumber(key);
    if (order) {
      orderData = summarizeOrder(order);
      session.orderData = orderData; // üî• salva permanentemente na mem√≥ria da conversa
      console.log('üì¶ Pedido encontrado (novo ou atualizado):');
      console.log(JSON.stringify(orderData, null, 2));
    }
  } catch (err) {
    console.error('Erro ao buscar pedido:', err);
  }
}

  const replies = await chatWithGemini(session, combinedText, orderData, !session.greeted);
  for (const part of replies) {
    await message.reply(part);
    await new Promise(r => setTimeout(r, 1000));
  }

  session.greeted = true;
  chat.clearState();
}, delay); // espera 25s na 1¬™ mensagem, 10s nas demais


return;

    const isFirstMessage = !session.greeted;

    // ====== AGRUPA MENSAGENS INICIAIS ======
    if (isFirstMessage) {
      session.batch.push(text);
      if (session.timer) clearTimeout(session.timer);

      const delay = session.batch.length === 1 ? 25000 : 10000;
      session.timer = setTimeout(async () => {
        const combined = session.batch.join('\n');
        pushHistory(session, 'user', combined);
        chat.sendStateTyping();

        // üîé Busca pedidos se houver n√∫mero, e-mail ou CPF
        let orderData = null;
        const matchOrder = combined.match(/\b(\d{3,8})\b/);
        const matchEmail = combined.match(/[^\s]+@[^\s]+/);
        const matchCPF = combined.match(/\d{3}\.?\d{3}\.?\d{3}-?\d{2}/);

        if (matchOrder || matchEmail || matchCPF) {
          try {
            const key = matchOrder ? matchOrder[1] : matchEmail ? matchEmail[0] : matchCPF[0];
            const order = await getOrderByNumber(key);
            if (order) {
              orderData = summarizeOrder(order);
              console.log('üì¶ Pedido encontrado (mensagem inicial):');
              console.log(JSON.stringify(orderData, null, 2));
            }
          } catch (err) {
            console.error('Erro ao buscar pedido na mensagem inicial:', err);
          }
        }

        const replies = await chatWithGemini(session, combined, orderData, true);
        for (const part of replies) {
          await message.reply(part);
          await new Promise(r => setTimeout(r, 1000));
        }

        session.greeted = true;
        session.batch = [];
        session.timer = null;
        chat.clearState();
      }, delay);

      return;
    }

     } catch (err) {
    console.error('Erro no handler principal:', err);
    try {
      await message.reply('Desculpe, ocorreu um erro inesperado.');
    } catch {}
  }
});
process.on('uncaughtException', err => {
  console.error('‚ùå Erro n√£o tratado:', err);
});
process.on('unhandledRejection', err => {
  console.error('‚ùå Promessa rejeitada:', err);
});

// Impede o Railway de reiniciar constantemente
setInterval(() => {
  console.log('üíì KeepAlive: bot rodando normalmente');
}, 60 * 1000); // 1 minuto

client.initialize().catch(e => console.error('Erro ao iniciar o WhatsApp client', e));

// ======= LIMPEZA AUTOM√ÅTICA DE SESS√ïES =======

// Marca o hor√°rio da √∫ltima atividade do usu√°rio (adicione session.lastActive = Date.now() dentro do handler!)
setInterval(() => {
  const now = Date.now();

  for (const [chatId, session] of sessions) {
    if (!session.lastActive) continue; // ignora se ainda n√£o foi usado

    const diffMins = (now - session.lastActive) / 1000 / 60;

    if (diffMins > 25) { // 25 minutos sem intera√ß√£o
      console.log(`üßπ Limpando sess√£o inativa de ${chatId} (${diffMins.toFixed(1)}min sem atividade)`);
      sessions.delete(chatId);
    }
  }
}, 10 * 60 * 1000); // verifica a cada 10 minutos
